<?php

// This file has been auto-generated by the Symfony Cache Component.

return [[

'App__Entity__Article__CLASSMETADATA__' => 0,
'App__Entity__UtilisateurArticle__CLASSMETADATA__' => 1,
'App__Entity__Utilisateur__CLASSMETADATA__' => 2,
'App__Entity__Categorie__CLASSMETADATA__' => 3,
'App__Entity__Commentaire__CLASSMETADATA__' => 4,
'App__Entity__Contact__CLASSMETADATA__' => 5,
'App__Entity__ResetPasswordRequest__CLASSMETADATA__' => 6,
'App__Entity__Role__CLASSMETADATA__' => 7,

], [

0 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Article',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\ArticleRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'titre' => $o[2],
                        'images' => $o[3],
                        'description' => $o[4],
                        'etat' => $o[5],
                        'statut' => $o[6],
                        'ville' => $o[7],
                        'dateAjout' => $o[8],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'titre' => 'titre',
                        'images' => 'images',
                        'description' => 'description',
                        'etat' => 'etat',
                        'statut' => 'statut',
                        'ville' => 'ville',
                        'date_ajout' => 'dateAjout',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'titre' => 'titre',
                        'images' => 'images',
                        'description' => 'description',
                        'etat' => 'etat',
                        'statut' => 'statut',
                        'ville' => 'ville',
                        'dateAjout' => 'date_ajout',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'article',
                    ],
                ],
                'associationMappings' => [
                    [
                        'categorie' => $o[9],
                        'utilisateur' => $o[11],
                        'commentaires' => $o[13],
                        'demandes' => $o[14],
                    ],
                ],
                'idGenerator' => [
                    $o[15],
                ],
                'name' => [
                    'App\\Entity\\Article',
                    10 => 'categorie_id',
                    12 => 'utilisateur_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'string',
                    'string',
                    'string',
                    'string',
                    'string',
                    'datetime',
                ],
                'fieldName' => [
                    1 => 'id',
                    'titre',
                    'images',
                    'description',
                    'etat',
                    'statut',
                    'ville',
                    'dateAjout',
                ],
                'columnName' => [
                    1 => 'id',
                    'titre',
                    'images',
                    'description',
                    'etat',
                    'statut',
                    'ville',
                    'date_ajout',
                ],
                'length' => [
                    2 => 255,
                    255,
                    255,
                    100,
                    255,
                    255,
                ],
                'fetch' => [
                    9 => 2,
                    11 => 2,
                    13 => 2,
                    2,
                ],
                'sourceEntity' => [
                    9 => 'App\\Entity\\Article',
                    11 => 'App\\Entity\\Article',
                    13 => 'App\\Entity\\Article',
                    'App\\Entity\\Article',
                ],
                'inversedBy' => [
                    9 => 'articles',
                    11 => 'articles',
                ],
                'sourceToTargetKeyColumns' => [
                    9 => [
                        'categorie_id' => 'id',
                    ],
                    11 => [
                        'utilisateur_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    9 => [
                        'id' => 'categorie_id',
                    ],
                    11 => [
                        'id' => 'utilisateur_id',
                    ],
                ],
                'joinColumns' => [
                    9 => [
                        $o[10],
                    ],
                    11 => [
                        $o[12],
                    ],
                ],
                'joinColumnFieldNames' => [
                    9 => [
                        'categorie_id' => 'categorie_id',
                    ],
                    11 => [
                        'utilisateur_id' => 'utilisateur_id',
                    ],
                ],
                'unique' => [
                    10 => false,
                    12 => false,
                ],
                'nullable' => [
                    10 => false,
                    12 => false,
                ],
                'referencedColumnName' => [
                    10 => 'id',
                    12 => 'id',
                ],
                'cascade' => [
                    13 => [
                        'remove',
                    ],
                ],
                'mappedBy' => [
                    13 => 'article',
                    'article',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    9 => 'categorie',
                    11 => 'utilisateur',
                    13 => 'commentaires',
                    'demandes',
                ],
                'targetEntity' => [
                    9 => 'App\\Entity\\Categorie',
                    11 => 'App\\Entity\\Utilisateur',
                    13 => 'App\\Entity\\Commentaire',
                    'App\\Entity\\UtilisateurArticle',
                ],
            ],
        ],
        $o[0],
        []
    );
},
1 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Id\\AssignedGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\AssignedGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\UtilisateurArticle',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'statut' => $o[2],
                        'createdAt' => $o[3],
                        'updatedAt' => $o[4],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'statut' => 'statut',
                        'created_at' => 'createdAt',
                        'updated_at' => 'updatedAt',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'statut' => 'statut',
                        'createdAt' => 'created_at',
                        'updatedAt' => 'updated_at',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'utilisateur_article',
                    ],
                ],
                'associationMappings' => [
                    [
                        'utilisateur' => $o[5],
                        'article' => $o[7],
                    ],
                ],
                'idGenerator' => [
                    $o[9],
                ],
                'name' => [
                    'App\\Entity\\UtilisateurArticle',
                    6 => 'utilisateur_id',
                    8 => 'article_id',
                ],
                'id' => [
                    1 => true,
                ],
                'unique' => [
                    1 => true,
                    6 => false,
                    8 => false,
                ],
                'type' => [
                    1 => 'uuid',
                    'string',
                    'datetime_immutable',
                    'datetime_immutable',
                ],
                'fieldName' => [
                    1 => 'id',
                    'statut',
                    'createdAt',
                    'updatedAt',
                ],
                'columnName' => [
                    1 => 'id',
                    'statut',
                    'created_at',
                    'updated_at',
                ],
                'enumType' => [
                    2 => 'App\\Enum\\StatutDemande',
                ],
                'nullable' => [
                    4 => true,
                    6 => false,
                    8 => false,
                ],
                'fetch' => [
                    5 => 2,
                    7 => 2,
                ],
                'sourceEntity' => [
                    5 => 'App\\Entity\\UtilisateurArticle',
                    7 => 'App\\Entity\\UtilisateurArticle',
                ],
                'sourceToTargetKeyColumns' => [
                    5 => [
                        'utilisateur_id' => 'id',
                    ],
                    7 => [
                        'article_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    5 => [
                        'id' => 'utilisateur_id',
                    ],
                    7 => [
                        'id' => 'article_id',
                    ],
                ],
                'joinColumns' => [
                    5 => [
                        $o[6],
                    ],
                    7 => [
                        $o[8],
                    ],
                ],
                'joinColumnFieldNames' => [
                    5 => [
                        'utilisateur_id' => 'utilisateur_id',
                    ],
                    7 => [
                        'article_id' => 'article_id',
                    ],
                ],
                'referencedColumnName' => [
                    6 => 'id',
                    8 => 'id',
                ],
                'inversedBy' => [
                    7 => 'demandes',
                ],
                'onDelete' => [
                    8 => 'CASCADE',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    5 => 'utilisateur',
                    7 => 'article',
                ],
                'targetEntity' => [
                    5 => 'App\\Entity\\Utilisateur',
                    7 => 'App\\Entity\\Article',
                ],
            ],
        ],
        $o[0],
        []
    );
},
2 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Utilisateur',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\UtilisateurRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'nom' => $o[2],
                        'prenom' => $o[3],
                        'pseudo' => $o[4],
                        'telephone' => $o[5],
                        'email' => $o[6],
                        'password' => $o[7],
                        'roles' => $o[8],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'nom' => 'nom',
                        'prenom' => 'prenom',
                        'pseudo' => 'pseudo',
                        'telephone' => 'telephone',
                        'email' => 'email',
                        'password' => 'password',
                        'roles' => 'roles',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'nom' => 'nom',
                        'prenom' => 'prenom',
                        'pseudo' => 'pseudo',
                        'telephone' => 'telephone',
                        'email' => 'email',
                        'password' => 'password',
                        'roles' => 'roles',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'utilisateur',
                    ],
                ],
                'associationMappings' => [
                    [
                        'articles' => $o[9],
                        'demandes' => $o[10],
                    ],
                ],
                'idGenerator' => [
                    $o[11],
                ],
                'name' => [
                    'App\\Entity\\Utilisateur',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'string',
                    'string',
                    'string',
                    'string',
                    'string',
                    'json',
                ],
                'fieldName' => [
                    1 => 'id',
                    'nom',
                    'prenom',
                    'pseudo',
                    'telephone',
                    'email',
                    'password',
                    'roles',
                ],
                'columnName' => [
                    1 => 'id',
                    'nom',
                    'prenom',
                    'pseudo',
                    'telephone',
                    'email',
                    'password',
                    'roles',
                ],
                'length' => [
                    2 => 255,
                    255,
                    255,
                    15,
                    255,
                    255,
                ],
                'unique' => [
                    4 => true,
                    6 => true,
                ],
                'cascade' => [
                    9 => [
                        'remove',
                    ],
                ],
                'fetch' => [
                    9 => 2,
                    2,
                ],
                'orphanRemoval' => [
                    9 => true,
                ],
                'sourceEntity' => [
                    9 => 'App\\Entity\\Utilisateur',
                    'App\\Entity\\Utilisateur',
                ],
                'mappedBy' => [
                    9 => 'utilisateur',
                    'utilisateur',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    9 => 'articles',
                    'demandes',
                ],
                'targetEntity' => [
                    9 => 'App\\Entity\\Article',
                    'App\\Entity\\UtilisateurArticle',
                ],
            ],
        ],
        $o[0],
        []
    );
},
3 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Categorie',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\CategorieRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'nom' => $o[2],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'nom' => 'nom',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'nom' => 'nom',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'categorie',
                    ],
                ],
                'associationMappings' => [
                    [
                        'articles' => $o[3],
                    ],
                ],
                'idGenerator' => [
                    $o[4],
                ],
                'name' => [
                    'App\\Entity\\Categorie',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                ],
                'fieldName' => [
                    1 => 'id',
                    'nom',
                ],
                'columnName' => [
                    1 => 'id',
                    'nom',
                ],
                'length' => [
                    2 => 255,
                ],
                'cascade' => [
                    3 => [
                        'persist',
                        'remove',
                    ],
                ],
                'fetch' => [
                    3 => 2,
                ],
                'sourceEntity' => [
                    3 => 'App\\Entity\\Categorie',
                ],
                'mappedBy' => [
                    3 => 'categorie',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    3 => 'articles',
                ],
                'targetEntity' => [
                    3 => 'App\\Entity\\Article',
                ],
            ],
        ],
        $o[0],
        []
    );
},
4 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Commentaire',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\CommentaireRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'message' => $o[2],
                        'date' => $o[3],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'message' => 'message',
                        'date' => 'date',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'message' => 'message',
                        'date' => 'date',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'commentaire',
                    ],
                ],
                'associationMappings' => [
                    [
                        'article' => $o[4],
                        'utilisateur' => $o[6],
                    ],
                ],
                'idGenerator' => [
                    $o[8],
                ],
                'name' => [
                    'App\\Entity\\Commentaire',
                    5 => 'article_id',
                    7 => 'utilisateur_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'text',
                    'datetime',
                ],
                'fieldName' => [
                    1 => 'id',
                    'message',
                    'date',
                ],
                'columnName' => [
                    1 => 'id',
                    'message',
                    'date',
                ],
                'fetch' => [
                    4 => 2,
                    6 => 2,
                ],
                'sourceEntity' => [
                    4 => 'App\\Entity\\Commentaire',
                    6 => 'App\\Entity\\Commentaire',
                ],
                'inversedBy' => [
                    4 => 'commentaires',
                ],
                'sourceToTargetKeyColumns' => [
                    4 => [
                        'article_id' => 'id',
                    ],
                    6 => [
                        'utilisateur_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    4 => [
                        'id' => 'article_id',
                    ],
                    6 => [
                        'id' => 'utilisateur_id',
                    ],
                ],
                'joinColumns' => [
                    4 => [
                        $o[5],
                    ],
                    6 => [
                        $o[7],
                    ],
                ],
                'joinColumnFieldNames' => [
                    4 => [
                        'article_id' => 'article_id',
                    ],
                    6 => [
                        'utilisateur_id' => 'utilisateur_id',
                    ],
                ],
                'unique' => [
                    5 => false,
                ],
                'nullable' => [
                    5 => false,
                ],
                'referencedColumnName' => [
                    5 => 'id',
                    7 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    4 => 'article',
                    6 => 'utilisateur',
                ],
                'targetEntity' => [
                    4 => 'App\\Entity\\Article',
                    6 => 'App\\Entity\\Utilisateur',
                ],
            ],
        ],
        $o[0],
        []
    );
},
5 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Contact',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\ContactRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'nom' => $o[2],
                        'email' => $o[3],
                        'sujet' => $o[4],
                        'message' => $o[5],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'nom' => 'nom',
                        'email' => 'email',
                        'sujet' => 'sujet',
                        'message' => 'message',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'nom' => 'nom',
                        'email' => 'email',
                        'sujet' => 'sujet',
                        'message' => 'message',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'contact',
                    ],
                ],
                'idGenerator' => [
                    $o[6],
                ],
                'name' => [
                    'App\\Entity\\Contact',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'string',
                    'string',
                    'string',
                ],
                'fieldName' => [
                    1 => 'id',
                    'nom',
                    'email',
                    'sujet',
                    'message',
                ],
                'columnName' => [
                    1 => 'id',
                    'nom',
                    'email',
                    'sujet',
                    'message',
                ],
                'length' => [
                    2 => 255,
                    255,
                    255,
                    255,
                ],
            ],
        ],
        $o[0],
        []
    );
},
6 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ManyToOneAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Mapping\\JoinColumnMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\JoinColumnMapping')),
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\ResetPasswordRequest',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\ResetPasswordRequestRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'selector' => $o[2],
                        'hashedToken' => $o[3],
                        'requestedAt' => $o[4],
                        'expiresAt' => $o[5],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'selector' => 'selector',
                        'hashed_token' => 'hashedToken',
                        'requested_at' => 'requestedAt',
                        'expires_at' => 'expiresAt',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'selector' => 'selector',
                        'hashedToken' => 'hashed_token',
                        'requestedAt' => 'requested_at',
                        'expiresAt' => 'expires_at',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'reset_password_request',
                    ],
                ],
                'associationMappings' => [
                    [
                        'user' => $o[6],
                    ],
                ],
                'idGenerator' => [
                    $o[8],
                ],
                'name' => [
                    'App\\Entity\\ResetPasswordRequest',
                    7 => 'user_id',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                    'string',
                    'datetime_immutable',
                    'datetime_immutable',
                ],
                'fieldName' => [
                    1 => 'id',
                    'selector',
                    'hashedToken',
                    'requestedAt',
                    'expiresAt',
                ],
                'columnName' => [
                    1 => 'id',
                    'selector',
                    'hashed_token',
                    'requested_at',
                    'expires_at',
                ],
                'length' => [
                    2 => 20,
                    100,
                ],
                'fetch' => [
                    6 => 2,
                ],
                'sourceEntity' => [
                    6 => 'App\\Entity\\ResetPasswordRequest',
                ],
                'sourceToTargetKeyColumns' => [
                    6 => [
                        'user_id' => 'id',
                    ],
                ],
                'targetToSourceKeyColumns' => [
                    6 => [
                        'id' => 'user_id',
                    ],
                ],
                'joinColumns' => [
                    6 => [
                        $o[7],
                    ],
                ],
                'joinColumnFieldNames' => [
                    6 => [
                        'user_id' => 'user_id',
                    ],
                ],
                'unique' => [
                    7 => false,
                ],
                'nullable' => [
                    7 => false,
                ],
                'referencedColumnName' => [
                    7 => 'id',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    6 => 'user',
                ],
                'targetEntity' => [
                    6 => 'App\\Entity\\Utilisateur',
                ],
            ],
        ],
        $o[0],
        []
    );
},
7 => static function () {
    return \Symfony\Component\VarExporter\Internal\Hydrator::hydrate(
        $o = [
            clone (($p = &\Symfony\Component\VarExporter\Internal\Registry::$prototypes)['Doctrine\\ORM\\Mapping\\ClassMetadata'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\ClassMetadata')),
            clone ($p['Doctrine\\ORM\\Mapping\\FieldMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\FieldMapping')),
            clone $p['Doctrine\\ORM\\Mapping\\FieldMapping'],
            clone ($p['Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Mapping\\OneToManyAssociationMapping')),
            clone ($p['Doctrine\\ORM\\Id\\IdentityGenerator'] ?? \Symfony\Component\VarExporter\Internal\Registry::p('Doctrine\\ORM\\Id\\IdentityGenerator')),
        ],
        null,
        [
            'stdClass' => [
                'namespace' => [
                    'App\\Entity',
                ],
                'rootEntityName' => [
                    'App\\Entity\\Role',
                ],
                'customRepositoryClassName' => [
                    'App\\Repository\\RoleRepository',
                ],
                'identifier' => [
                    [
                        'id',
                    ],
                ],
                'generatorType' => [
                    4,
                ],
                'fieldMappings' => [
                    [
                        'id' => $o[1],
                        'nom' => $o[2],
                    ],
                ],
                'fieldNames' => [
                    [
                        'id' => 'id',
                        'nom' => 'nom',
                    ],
                ],
                'columnNames' => [
                    [
                        'id' => 'id',
                        'nom' => 'nom',
                    ],
                ],
                'table' => [
                    [
                        'name' => 'role',
                    ],
                ],
                'associationMappings' => [
                    [
                        'utilisateurs' => $o[3],
                    ],
                ],
                'idGenerator' => [
                    $o[4],
                ],
                'name' => [
                    'App\\Entity\\Role',
                ],
                'id' => [
                    1 => true,
                ],
                'type' => [
                    1 => 'integer',
                    'string',
                ],
                'fieldName' => [
                    1 => 'id',
                    'nom',
                ],
                'columnName' => [
                    1 => 'id',
                    'nom',
                ],
                'length' => [
                    2 => 255,
                ],
                'fetch' => [
                    3 => 2,
                ],
                'sourceEntity' => [
                    3 => 'App\\Entity\\Role',
                ],
                'mappedBy' => [
                    3 => 'role',
                ],
            ],
            'Doctrine\\ORM\\Mapping\\AssociationMapping' => [
                'fieldName' => [
                    3 => 'utilisateurs',
                ],
                'targetEntity' => [
                    3 => 'App\\Entity\\Utilisateur',
                ],
            ],
        ],
        $o[0],
        []
    );
},

]];
